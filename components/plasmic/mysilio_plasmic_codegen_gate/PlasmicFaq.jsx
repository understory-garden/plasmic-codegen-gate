// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gErtg5ViHSLXLeffwUSREY
// Component: cN31TQ2GydrE
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import BaseCard from "../../BaseCard"; // plasmic-import: 9PBQw0dowzBM/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as sty from "./PlasmicFaq.module.css"; // plasmic-import: cN31TQ2GydrE/css

export const PlasmicFaq__VariantProps = new Array();

export const PlasmicFaq__ArgProps = new Array("children", "slot");

function PlasmicFaq__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <BaseCard
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__jkxCr)}
      >
        <div className={classNames(defaultcss.all, sty.freeBox___7OKb2)}>
          <div className={classNames(defaultcss.all, sty.freeBox__hdAfN)}>
            {p.renderPlasmicSlot({
              defaultContents: "Are there long-term contracts?",
              value: args.children,
              className: classNames(sty.slotChildren)
            })}
          </div>
        </div>

        {p.renderPlasmicSlot({
          defaultContents:
            "Yes! You can. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat.",
          value: args.slot,
          className: classNames(sty.slotSlot)
        })}
      </p.Stack>
    </BaseCard>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFaq__ArgProps,
      internalVariantPropNames: PlasmicFaq__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicFaq__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFaq";
  } else {
    func.displayName = `PlasmicFaq.${nodeName}`;
  }
  return func;
}

export const PlasmicFaq = Object.assign(
  // Top-level PlasmicFaq renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicFaq
    internalVariantProps: PlasmicFaq__VariantProps,
    internalArgProps: PlasmicFaq__ArgProps
  }
);

export default PlasmicFaq;
/* prettier-ignore-end */
